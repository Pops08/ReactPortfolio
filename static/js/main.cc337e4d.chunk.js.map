{"version":3,"sources":["components/Nav/index.js","components/pages/aboutme.js","components/Portfolio/index.js","components/pages/contact.js","utils/helpers.js","components/pages/resume.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","class","href","type","data-toggle","data-target","className","map","tab","key","toLowerCase","onClick","handlePageChange","currentPage","About","id","Portfolio","ContactForm","useState","name","email","message","formState","setFormState","errorMessage","setErrorMessage","handleChange","e","target","isValid","test","String","validateEmail","value","console","log","length","onSubmit","preventDefault","htmlFor","defaultValue","onBlur","rows","Resume","download","PortfolioHeader","renderPage","Footer","rel","App","Header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.cc337e4d.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Nav(props) {\n  const tabs = ['About Me', 'Portfolio', 'Contact', 'Resume'];\n\n  return (\n\n    <nav class=\"navbar navbar-expand-md bg-dark navbar-dark\">\n  <a class=\"navbar-brand\" href=\"#\">J. Hartshorn</a>\n\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n    <ul className=\"nav\">\n      {tabs.map(tab => (\n        <li className=\"\" key={tab}>\n          <a\n            href={'#' + tab.toLowerCase()}\n            onClick={() => props.handlePageChange(tab)}\n            className={\n              props.currentPage === tab ? 'nav-link active' : 'nav-link'\n            }\n          >\n            {tab}\n          </a>\n        </li>\n      ))}\n    </ul>\n    </nav>\n\n  );\n}\n\nexport default Nav;","import React from 'react';\n\n\nfunction About() {\n  return (\n    <section className=\"my-5\">\n      <h1 id=\"about\">Who am I?</h1>\n    </section>\n  );\n}\n\nexport default About;","import React from 'react';\n\nfunction Portfolio({  }) {\n  return (\n<h1>Projects!</h1>\n  );\n}\n\nexport default Portfolio;","import React, { useState } from 'react';\nimport { validateEmail } from '../../utils/helpers';\n\n\nfunction ContactForm() {\n    const [formState, setFormState] = useState({ name: '', email: '', message: '' });\n\n    const { name, email, message } = formState;\n    const [errorMessage, setErrorMessage] = useState('');\n\n\n    function handleChange(e) {\n        if (e.target.name === 'email') {\n            const isValid = validateEmail(e.target.value);\n            console.log(isValid);\n            // isValid conditional statement\n            if (!isValid) {\n                setErrorMessage('Your email is invalid.');\n            } else {\n                setErrorMessage('');\n            }\n          } \n        else {\n            if (!e.target.value.length) {\n              setErrorMessage(`${e.target.name} is required.`);\n            } else {\n              setErrorMessage('');\n            }\n          }\n          \n        //...formState, so we can retain the other key-value pairs in this object. Without the spread operator, \n        //the formState object would be overwritten to only contain the name: value key pair.\n        //setFormState({...formState, name: e.target.value })\n        //The name property of target refers to the name attribute of the form element\n        if (!errorMessage) {\n            setFormState({ ...formState, [e.target.name]: e.target.value });\n          }        \n        console.log('errorMessage', errorMessage);\n      }\n      \n    //   console.log(formState);\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        console.log(formState);\n      }\n\n\n    // JSX\n    return (\n        <section>\n          <h1>Contact me</h1>\n          <form id=\"contact-form\" onSubmit={handleSubmit}>\n            <div>\n              <label htmlFor=\"name\">Name:</label>\n              <input type=\"text\" defaultValue={name} onBlur={handleChange} name=\"name\" />\n            </div>\n            <div>\n              <label htmlFor=\"email\">Email address:</label>\n              <input type=\"email\" defaultValue={email} name=\"email\" onBlur={handleChange} />\n            </div>\n            <div>\n              <label htmlFor=\"message\">Message:</label>\n              <textarea name=\"message\" defaultValue={message} onBlur={handleChange} rows=\"5\" />\n            </div>\n            {errorMessage && (\n  <div>\n    <p className=\"error-text\">{errorMessage}</p>\n  </div>\n)}\n            <button type=\"submit\">Submit</button>\n          </form>\n        </section>\n        );\n    }\n    \n    export default ContactForm;","export function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function validateEmail(email) {\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}","import React from 'react';\n\nfunction Resume() {\n  return (\n    <>\n        <div>\n            <h1>\n              Technical Skills\n            </h1>\n              <p>\n                Click here to <a href='JHartResume.txt' download>download my resume</a>.\n              </p>\n              <h2>Client Side</h2>\n              <ul>\n                <li>HTML</li>\n                <li>CSS</li>\n                <li>Js</li>\n                <li>React</li>\n              </ul>\n              <h2>Server Technologies</h2>\n              <ul>\n                <li>Express</li>\n                <li>Node</li>\n              </ul>\n              <h2>Data Storage</h2>\n              <ul>\n                <li>MySQL</li>\n                <li>MongoDB</li>\n              </ul>\n        </div>\n    </>\n  )\n}\n\nexport default Resume;","import React, { useState } from 'react';\nimport Nav from '../Nav';\nimport AboutMe from '../pages/aboutme';\nimport Portfolio from '../Portfolio';\nimport Contact from '../pages/contact';\nimport Resume from '../pages/resume';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction PortfolioHeader() {\n  const [currentPage, handlePageChange] = useState('About');\n\n\n\n  const renderPage = () => {\n    // Add a switch statement that will return the appropriate component of the 'currentPage'\n    switch(currentPage) {\n      case 'About': \n      return (<AboutMe />)\n\n      case 'Portfolio': \n      return (<Portfolio />)\n\n      case 'Contact': \n      return (<Contact/>)\n\n      case 'Resume':\n      return (<Resume />)\n\n      default: \n      return(<AboutMe />)\n    }\n\n  };\n\n  return (\n    <div>\n      <Nav currentPage={currentPage} handlePageChange={handlePageChange} />\n      <div>\n        {\n          // Render the component returned by 'renderPage()'\n          renderPage()\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default PortfolioHeader;","import React from \"react\";\n\nconst Footer = () => (\n\n//     <nav class=\"navbar navbar-expand-md bg-dark navbar-dark\">\n\n//   <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\n//     <span class=\"navbar-toggler-icon\"></span>\n//   </button>\n\n//   <div className=\"footer nav mt-auto\">\n//     <a href=\"https://github.com/pops08\" target=\"_blank\" >\n//        <h1> GitHub </h1>\n//     </a> \n//     <br />\n\n\n//     <br />\n\n    // <a href=\"https://twitter.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n    //     <h1> Twitter </h1>\n    // </a> \n//   </div>\n//   </nav>\n\n\n<footer class=\"page-footer font-small blue pt-4\">\n\n  <div class=\"container-fluid text-center text-md-left bg-dark navbar-dark\">\n\n    <div class=\"row text-center\">\n\n      <div class=\"col-md-3 mt-md-0 mt-3\">\n\n        <h5 class=\"text-uppercase\">\n           <a href=\"https://github.com/pops08\" target=\"_blank\" >\n        <h1> GitHub </h1>\n     </a> \n        </h5>\n\n      </div>\n\n      <hr class=\"clearfix w-100 d-md-none pb-3\" />\n\n      <div class=\"col-md-3 mb-md-0 mb-3\">\n\n        <h5 class=\"text-uppercase\">\n        <a href=\"https://www.linkedin.com/in/joshuahartshorn\" target=\"_blank\" >\n        <h1> Linkedin </h1>\n        </a> \n        </h5>\n\n\n      </div>\n\n      <div class=\"col-md-3 mb-md-0 mb-3\">\n\n        <h5 class=\"text-uppercase\">\n        <a href=\"https://twitter.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <h1> Twitter </h1>\n        </a> \n        </h5>\n\n      </div>\n\n    </div>\n\n  </div>\n</footer>\n\n);\n\n\nexport default Footer;","import React from 'react';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n\n  return (\n\n<div>\n  <Header />\n  <Footer />\n</div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}